{"version":3,"sources":["App.tsx","AppRouter.tsx","index.tsx"],"names":["App","useState","provider","signer","address","balance","states","setStates","messageInput","contractSavingBtnStatus","valueInput","data","contractGetingBtnStatus","contractConnectingBtnLoading","contract","events","setContract","connetingToMetaMask","a","ethers","providers","Web3Provider","window","ethereum","send","getSigner","getAddress","utils","getBalance","formatEther","saveDataToContract","Number","abi","contractObject","Contract","contractWithSigner","connect","setData","getDataFromContract","getData","useEffect","on","message","unit","event","oldState","className","src","width","Button","variant","color","onClick","autoComplete","TextField","id","label","value","onChange","e","target","type","disabled","CircularProgress","size","theme","map","inde","key","AppRouter","fallback","exact","path","component","client","ApolloClient","uri","process","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.93c0124d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport logo from './logo.svg'\r\nimport './App.scss'\r\nimport Button from '@material-ui/core/Button';\r\nimport { Contract, ethers } from \"ethers\";\r\nimport TextField  from '@material-ui/core/TextField';\r\nimport CircularProgress  from '@material-ui/core/CircularProgress';\r\nimport ReactJson from 'react-json-view'\r\n\r\nconst METAMASK_LOGO = 'https://raw.githubusercontent.com/MetaMask/brand-resources/c3c894bb8c460a2e9f47c07f6ef32e234190a7aa/SVG/metamask-fox.svg'\r\ntype StateType = { [key: string]: any }\r\ntype Loading = 'IDLE' | 'PROCESSING' | 'SUCESS' | 'FAIL';\r\n\r\nfunction App() {\r\n\r\n  const [states, setStates] = useState<StateType>({\r\n    provider: null,\r\n    signer: null,\r\n    address: null,\r\n    balance: null,\r\n  })\r\n\r\n  const [contract, setContract] = useState<StateType>({\r\n    address: '0x48741D09A695c90174084925492a2a65e7CCe4d4',\r\n    messageInput: '',\r\n    contractSavingBtnStatus: 'IDLE',\r\n    valueInput: '',\r\n    data: null,\r\n    contractGetingBtnStatus: 'IDLE',\r\n    contractConnectingBtnLoading: false,\r\n    contract: null,\r\n    events: [],\r\n  })\r\n\r\n\r\n  const connetingToMetaMask = async () => {\r\n    // @ts-ignore\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n\r\n    // MetaMask requires requesting permission to connect users accounts\r\n    await provider.send(\"eth_requestAccounts\", []);\r\n    \r\n    // The MetaMask plugin also allows signing transactions to\r\n    // send ether and pay to change state within the blockchain.\r\n    // For this, you need the account signer...\r\n    const signer = provider.getSigner()\r\n\r\n    setStates({\r\n      ...states,\r\n      provider,\r\n      signer,\r\n      address: await signer.getAddress(),\r\n      balance: ethers.utils.formatEther(await provider.getBalance(await signer.getAddress())) // ether\r\n    })\r\n  }\r\n\r\n  const saveDataToContract = async () => {\r\n\r\n    const address = contract.address;\r\n    const messageInput = contract.messageInput;\r\n    const valueInput = Number(contract.valueInput);\r\n\r\n    if (\r\n      !address ||\r\n      !messageInput || \r\n      !valueInput ||\r\n      typeof valueInput !== 'number'\r\n    ) {\r\n      return setContract({\r\n        ...contract,\r\n        contractSavingBtnStatus: 'FAIL',\r\n        messageInput: '',\r\n        valueInput: ''\r\n      })\r\n    }\r\n\r\n    setContract({\r\n      ...contract,\r\n      contractSavingBtnStatus: 'PROCESSING'\r\n    })\r\n\r\n    const abi = [\r\n      'function setMessage(string calldata _message) external',\r\n      'function getMessage() public view returns(string memory)',\r\n      'function setData(string calldata _message, uint _value) external',\r\n      'function getData() public view returns(string memory, uint)',\r\n\r\n      'event MessageSaved(string message)',\r\n      'event DataSaved(string message, uint value)'\r\n    ]\r\n\r\n    const contractObject = new ethers.Contract(address, abi, states.provider);\r\n\r\n    const contractWithSigner = contractObject.connect(states.signer);\r\n\r\n    await contractWithSigner.setData(messageInput, valueInput);\r\n\r\n    setContract({\r\n      ...contract,\r\n      contractSavingBtnStatus: 'SUCCESS'\r\n    })\r\n  }\r\n\r\n  const getDataFromContract = async () => {\r\n    const address = contract.address;\r\n\r\n    if (!address) setContract({\r\n      ...contract,\r\n      contractGetingBtnStatus: 'FAIL',\r\n    })\r\n\r\n    setContract({\r\n      ...contract,\r\n      contractGetingBtnStatus: 'PROCESSING',\r\n    })\r\n\r\n    const abi = [\r\n      'function setMessage(string calldata _message) external',\r\n      'function getMessage() public view returns(string memory)',\r\n      'function setData(string calldata _message, uint _value) external',\r\n      'function getData() public view returns(string memory, uint)',\r\n\r\n      'event MessageSaved(string message)',\r\n      'event DataSaved(string message, uint value)'\r\n    ]\r\n\r\n    const contractObject = new ethers.Contract(address, abi, states.provider);\r\n\r\n    const contractWithSigner = contractObject.connect(states.signer);\r\n\r\n    const data = await contractWithSigner.getData();\r\n\r\n    setContract({\r\n      ...contract,\r\n      data,\r\n      contractGetingBtnStatus: 'SUCCESS'\r\n    })\r\n  }\r\n\r\n  // @ts-ignore\r\n  useEffect(async () => {\r\n    if (states.signer) {\r\n      setContract({\r\n        ...contract,\r\n        contractConnectingBtnLoading: true\r\n      })\r\n\r\n      const address = contract.address;\r\n\r\n      const abi = [\r\n        'function setMessage(string calldata _message) external',\r\n        'function getMessage() public view returns(string memory)',\r\n        'function setData(string calldata _message, uint _value) external',\r\n        'function getData() public view returns(string memory, uint)',\r\n  \r\n        'event MessageSaved(string message)',\r\n        'event DataSaved(string message, uint value)'\r\n      ]\r\n\r\n      const contractObject = new ethers.Contract(address, abi, states.provider);\r\n\r\n      setContract({\r\n        ...contract,\r\n        contract: contractObject,\r\n        contractConnectingBtnLoading: false,\r\n      })\r\n\r\n\r\n      contractObject.on(\"DataSaved\", (message: string, unit: number, event: any) => {\r\n\r\n        setContract(oldState => {\r\n          return {\r\n            ...oldState,\r\n            events: [{message}, ...oldState.events]\r\n          }\r\n        })\r\n      })\r\n\r\n    }\r\n  }, [states.signer])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n\r\n      {\r\n        !states.signer\r\n        ? \r\n          <Button variant='contained' color=\"primary\" onClick={connetingToMetaMask}>Connect to Metamask</Button>\r\n        : \r\n        <article>\r\n          <img src={METAMASK_LOGO} width={100} />\r\n          <div>{states.address}</div>\r\n          <div>{states.balance} (eth)</div>\r\n          <Button variant='contained' color=\"primary\">Connected</Button>\r\n        </article>\r\n      }\r\n\r\n\r\n      {\r\n        contract.contract\r\n        &&\r\n          <article>\r\n            <h2>Interact with contract</h2>\r\n            <h3 className='contract-address'>Contract address {contract.address}</h3>\r\n            \r\n            <form \r\n              autoComplete='off' \r\n              className='set-data-to-contract'  \r\n            >\r\n              <h3>Set data to contract:</h3>\r\n              <TextField \r\n                id=\"message\" \r\n                label=\"Message\" \r\n                variant=\"outlined\" \r\n                value={contract.messageInput}\r\n                onChange={e => {\r\n                  setContract({\r\n                    ...contract,\r\n                    messageInput: e.target.value,\r\n                  })\r\n                }}  \r\n              />\r\n              <TextField \r\n                id=\"value\" \r\n                label=\"Value\" \r\n                variant=\"outlined\" \r\n                type='number'\r\n                value={contract.valueInput}  \r\n                onChange={e => {\r\n                  setContract({\r\n                    ...contract,\r\n                    valueInput: e.target.value,\r\n                  })\r\n                }}\r\n              />\r\n\r\n              {(() => {\r\n                switch (contract.contractSavingBtnStatus) {\r\n                  case 'IDLE':\r\n                    return <Button \r\n                      variant=\"contained\" \r\n                      color=\"primary\"\r\n                      onClick={saveDataToContract}  \r\n                    >Save data to contract</Button>\r\n                  case 'PROCESSING':\r\n                    return <div className='button-loading'> \r\n                      <Button \r\n                        variant=\"contained\"\r\n                        disabled={true}\r\n                      >\r\n                        Processing\r\n                      </Button>\r\n                      <CircularProgress className='button-loading-second-ele' size={24} />\r\n                    </div>\r\n                  case 'SUCCESS':\r\n                    return <Button \r\n                      variant=\"contained\" \r\n                      color=\"primary\"\r\n                      onClick={() => {\r\n                        setContract({\r\n                          ...contract,\r\n                          contractSavingBtnStatus: 'IDLE',\r\n                          messageInput: '',\r\n                          valueInput: '',\r\n                        })\r\n                      }}  \r\n                    >Saving success</Button>\r\n                  case 'FAIL':\r\n                    return <Button \r\n                      variant=\"contained\" \r\n                      color=\"secondary\"\r\n                      onClick={() => {\r\n                        setContract({\r\n                          ...contract,\r\n                          contractSavingBtnStatus: 'IDLE',\r\n                          messageInput: '',\r\n                          valueInput: ''\r\n                        })\r\n                      }}    \r\n                    >Saving fail</Button>\r\n                }\r\n              })()}\r\n\r\n      \r\n            </form>\r\n          </article>\r\n      }\r\n\r\n      {\r\n        contract.contract\r\n        &&\r\n        <article>\r\n          <h3>Get data from contract</h3>\r\n\r\n          {(() => {\r\n            switch (contract.contractGetingBtnStatus) {\r\n              case 'IDLE':\r\n                return <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\"\r\n                  onClick={getDataFromContract}  \r\n                >Start get</Button>\r\n              case 'PROCESSING':\r\n                return <div className='button-loading'> \r\n                  <Button \r\n                    variant=\"contained\"\r\n                    disabled={true}\r\n                  >\r\n                    Processing\r\n                  </Button>\r\n                  <CircularProgress className='button-loading-second-ele' size={24} />\r\n                </div>\r\n              case 'SUCCESS':\r\n                return <Button \r\n                  variant=\"contained\" \r\n                  color=\"primary\"\r\n                  onClick={() => {\r\n                    setContract({\r\n                      ...contract,\r\n                      contractGetingBtnStatus: 'IDLE',\r\n                      messageInput: '',\r\n                      valueInput: '',\r\n                      data: null\r\n                    })\r\n                  }}  \r\n                >Geting success</Button>\r\n              case 'FAIL':\r\n                return <Button \r\n                  variant=\"contained\" \r\n                  color=\"secondary\"\r\n                  onClick={() => {\r\n                    setContract({\r\n                      ...contract,\r\n                      contractGetingBtnStatus: 'IDLE',\r\n                      messageInput: '',\r\n                      valueInput: ''\r\n                    })\r\n                  }}    \r\n                >Geting fail</Button>\r\n            }\r\n          })()}\r\n\r\n          { contract.data &&  <ReactJson theme=\"monokai\" src={contract.data} />}\r\n        </article>\r\n      }\r\n\r\n      {\r\n        contract.contract\r\n        && \r\n        <article className='events'>\r\n          <h3>Events of contract</h3>\r\n          {\r\n            contract.events.map((event, inde) => {\r\n              return <div key={inde}>\r\n                DataSaved Event with message: {event.message}\r\n              </div>\r\n            })\r\n          }\r\n        </article>\r\n      }\r\n\r\n      {\r\n        contract.contractConnectingBtnLoading \r\n        &&\r\n        <div className='button-loading'>\r\n          <Button variant='contained' disabled={true}>Connecting to contract ...</Button>\r\n          <CircularProgress className='button-loading-second-ele' size={24} />\r\n        </div>\r\n      }\r\n     \r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// src/AppRouter.tsx\n\nimport React, { Suspense } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { RecoilRoot } from 'recoil'\nimport App from './App'\n\nconst AppRouter = () => (\n  <Router>\n    <RecoilRoot>\n      <Suspense fallback={<span>Loading...</span>}>\n        <Switch>\n          <Route exact path=\"/\" component={App} />\n        </Switch>\n      </Suspense>\n    </RecoilRoot>\n  </Router>\n)\n\n/*\n// TODO EE: To replace Recoil with Redux Toolkit;\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\n<Router>\n  <Provider store={store}>\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n    </Switch>\n  </Provider>\n</Router>\n\n */\n\n/*\n\n// TODO: EE: Without Recoil or Redux Toolkit;\n\n// src/AppRouter.tsx\n\nimport React, { FunctionComponent } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport App from './App'\n\nconst AppRouter: FunctionComponent = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n      </Switch>\n    </Router>\n  )\n}\n\n */\n\nexport default AppRouter\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport AppRouter from './AppRouter'\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from '@apollo/client'\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_PUBLIC_URI,\n  cache: new InMemoryCache(),\n})\n\n// You need bootstrap? $ yarn add bootstrap\n// See: https://create-react-app.dev/docs/adding-bootstrap\n// import 'bootstrap/dist/css/bootstrap.css';\n\n// Single-page application (SPA)\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <AppRouter />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n// If you want to Pre-render with react-snap\n// Step 1: install $ yarn add --dev react-snap\n// Step 2: add to package.json run script: \"postbuild\": \"react-snap\"\n// Step 3: Add to package.json: \"reactSnap\":{\"inlineCss\":true}\n// Step 3: replace to the script below.\n\n/*\nimport { hydrate, render } from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\n\nconst rootElement = document.getElementById('root')\nif (rootElement && rootElement!.hasChildNodes()) {\n  hydrate(<AppRouter />, rootElement)\n\n  // Precache - set to 'register' once you Pre-render\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: http://bit.ly/CRA-PWA\n  serviceWorker.register()\n} else {\n  render(<AppRouter />, rootElement)\n}\n*/\n"],"sourceRoot":""}